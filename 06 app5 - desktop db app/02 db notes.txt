
DBs python can interact with:
    MySQL
    PostgreSQL
    Oracle
    SQlite
    etc...


----------------------SQlite-------------------------------------------------------------------------------------
Not client server db
based on files (.db files)
used for less data
no need to install it in every machine, transfer of program will be sufficient
portable, popular
---------------
Library name: sqlite3

interacting with db consists of:
    1.  connect to db
    2.  create a cursor object
    3.  write a sql query
    4.  commit changes to db
    5.  close connection

SQL datatypes           Python resemblances
    TEXT                str
    INTEGER             int
    REAL                float
----------code example--------------------------

import sqlite3


def create_table():
    conn = sqlite3.connect('lite.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS store (item TEXT, quantity INTEGER, price REAL)')
    conn.commit()
    conn.close()


def insert(item, qty, price):
    conn = sqlite3.connect('lite.db')
    cur = conn.cursor()
    cur.execute('INSERT INTO store VALUES (?, ?, ?)', (item, qty, price))
    conn.commit()
    conn.close()


def update_quantity(item, qty, price):
    conn = sqlite3.connect('lite.db')
    cur = conn.cursor()
    cur.execute('UPDATE store SET quantity=?, price=? WHERE item=?', (qty, price, item))
    conn.commit()
    conn.close()


def delete(item):
    conn = sqlite3.connect('lite.db')
    cur = conn.cursor()
    cur.execute('DELETE FROM store WHERE item=?', (item,))
    conn.commit()
    conn.close()


def view():
    conn = sqlite3.connect('lite.db')
    cur = conn.cursor()
    cur.execute('SELECT * FROM store')
    rows = cur.fetchall()
    conn.close()
    for r in rows:
        print("{:10s}\t|\t{:3d}\t|\t{:7.2f}".format(r[0], r[1], r[2]))
    print('-------------------------------')


if __name__ == "__main__":
    create_table()
    insert('Rubber', 1, 25)
    insert('Steel', 1, 20)
    insert('Wood', 1, 15)
    insert('Plastic', 2, 12)
    view()
    update_quantity('Wood', 5, 15)
    view()
    delete('Steel')
    view()






---------------------PostgreSQL----------------------------------------------------------------------------------------
needs to be installed where its used to operate on it
used in web apps
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04
-------------------
Library name: psycopg2

--------installing postgreSQL in UBUNTU--------------
installation method:
$ sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
$ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get -y install postgresql

to access superuser: (password is unknown)
$ sudo -u postgres psql postgres

to create custom superuser with specified password:
$ sudo -u postgres createuser --interactive
Enter name of role to add: <user-name>
Shall the new role be a superuser? (y/n) y
$ sudo -u postgres psql postgres
# \password <user-name>
Enter a password:
Enter it again:
# \q

----------------NOTE--------------
host: localhost
port: 5432

------see schema details of an existing table------
$ sudo -u postgres psql postgres
# \d+ <table-name>


------installing psycopg2 (worked for UBUNTU)------------------
$ pip install psycopg2
if error, do the next one, otherwise NOT.
    $ pip install psycopg2-binary

-------------------CODE EXAMPLE---------------------------

import psycopg2

connect_string = 'dbname=postgres user=<user-name> password=<password> host=localhost port=5432'


def create_table():
    conn = psycopg2.connect(connect_string)
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS store (item TEXT, quantity INTEGER, price REAL)')
    conn.commit()
    conn.close()


def insert(item, qty, price):
    conn = psycopg2.connect(connect_string)
    cur = conn.cursor()
    cur.execute('INSERT INTO store (item, quantity, price) VALUES(%s, %s, %s)', (item, qty, price))  # better tha later option
    # OR
    # cur.execute("INSERT INTO store (item, quantity, price) VALUES('%s', %s, %s)" % (item, qty, price))
    # note: postgres cannot accept "value", it only accepts 'value'
    conn.commit()
    conn.close()


def update_quantity(item, qty, price):
    conn = psycopg2.connect(connect_string)
    cur = conn.cursor()
    cur.execute('UPDATE store SET quantity=%s, price=%s WHERE item=%s', (qty, price, item))
    conn.commit()
    conn.close()


def delete(item):
    conn = psycopg2.connect(connect_string)
    cur = conn.cursor()
    cur.execute('DELETE FROM store WHERE item=%s', (item,))
    conn.commit()
    conn.close()


def view():
    conn = psycopg2.connect(connect_string)
    cur = conn.cursor()
    cur.execute('SELECT * FROM store')
    rows = cur.fetchall()
    conn.close()
    for r in rows:
        print("{:10s}\t|\t{:3d}\t|\t{:7.2f}".format(r[0], r[1], r[2]))
    print('-------------------------------')


if __name__ == "__main__":
    create_table()
    insert('Rubber', 1, 25)
    insert('Steel', 1, 20)
    insert('Wood', 1, 15)
    insert('Plastic', 2, 12)
    view()
    update_quantity('Wood', 5, 15)
    view()
    delete('Steel')
    view()

